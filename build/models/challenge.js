"use strict";
/*
 * Copyright (c) 2014-2025 Bjoern Kimminich & the OWASP Juice Shop contributors.
 * SPDX-License-Identifier: MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChallengeModelInit = exports.ChallengeModel = void 0;
/* jslint node: true */
const sequelize_1 = require("sequelize");
const CHALLENGE_KEYS = [
    'restfulXssChallenge',
    'accessLogDisclosureChallenge',
    'registerAdminChallenge',
    'adminSectionChallenge',
    'fileWriteChallenge',
    'resetPasswordBjoernOwaspChallenge',
    'tokenSaleChallenge',
    'nftUnlockChallenge',
    'nftMintChallenge',
    'web3WalletChallenge',
    'web3SandboxChallenge',
    'rceChallenge',
    'captchaBypassChallenge',
    'changePasswordBenderChallenge',
    'christmasSpecialChallenge',
    'usernameXssChallenge',
    'persistedXssUserChallenge',
    'directoryListingChallenge',
    'localXssChallenge',
    'dbSchemaChallenge',
    'deprecatedInterfaceChallenge',
    'easterEggLevelOneChallenge',
    'emailLeakChallenge',
    'emptyUserRegistration',
    'ephemeralAccountantChallenge',
    'errorHandlingChallenge',
    'manipulateClockChallenge',
    'extraLanguageChallenge',
    'feedbackChallenge',
    'forgedCouponChallenge',
    'forgedFeedbackChallenge',
    'forgedReviewChallenge',
    'jwtForgedChallenge',
    'forgottenDevBackupChallenge',
    'forgottenBackupChallenge',
    'typosquattingAngularChallenge',
    'ghostLoginChallenge',
    'dataExportChallenge',
    'httpHeaderXssChallenge',
    'continueCodeChallenge',
    'dlpPasswordSprayingChallenge',
    'dlpPastebinDataLeakChallenge',
    'typosquattingNpmChallenge',
    'loginAdminChallenge',
    'loginAmyChallenge',
    'loginBenderChallenge',
    'oauthUserPasswordChallenge',
    'loginJimChallenge',
    'loginRapperChallenge',
    'loginSupportChallenge',
    'basketManipulateChallenge',
    'misplacedSignatureFileChallenge',
    'timingAttackChallenge',
    'easterEggLevelTwoChallenge',
    'noSqlCommandChallenge',
    'noSqlOrdersChallenge',
    'noSqlReviewsChallenge',
    'redirectCryptoCurrencyChallenge',
    'weakPasswordChallenge',
    'negativeOrderChallenge',
    'premiumPaywallChallenge',
    'privacyPolicyChallenge',
    'privacyPolicyProofChallenge',
    'changeProductChallenge',
    'reflectedXssChallenge',
    'passwordRepeatChallenge',
    'resetPasswordBenderChallenge',
    'resetPasswordBjoernChallenge',
    'resetPasswordJimChallenge',
    'resetPasswordMortyChallenge',
    'retrieveBlueprintChallenge',
    'ssrfChallenge',
    'sstiChallenge',
    'scoreBoardChallenge',
    'securityPolicyChallenge',
    'persistedXssFeedbackChallenge',
    'hiddenImageChallenge',
    'rceOccupyChallenge',
    'supplyChainAttackChallenge',
    'twoFactorAuthUnsafeSecretStorageChallenge',
    'jwtUnsignedChallenge',
    'uploadSizeChallenge',
    'uploadTypeChallenge',
    'unionSqlInjectionChallenge',
    'videoXssChallenge',
    'basketAccessChallenge',
    'knownVulnerableComponentChallenge',
    'weirdCryptoChallenge',
    'redirectChallenge',
    'xxeFileDisclosureChallenge',
    'xxeDosChallenge',
    'yamlBombChallenge',
    'zeroStarsChallenge',
    'missingEncodingChallenge',
    'svgInjectionChallenge',
    'exposedMetricsChallenge',
    'freeDeluxeChallenge',
    'csrfChallenge',
    'xssBonusChallenge',
    'resetPasswordUvoginChallenge',
    'geoStalkingMetaChallenge',
    'geoStalkingVisualChallenge',
    'killChatbotChallenge',
    'nullByteChallenge',
    'bullyChatbotChallenge',
    'lfrChallenge',
    'closeNotificationsChallenge',
    'csafChallenge',
    'exposedCredentialsChallenge'
];
class Challenge extends sequelize_1.Model {
}
exports.ChallengeModel = Challenge;
const ChallengeModelInit = (sequelize) => {
    Challenge.init({
        id: {
            type: sequelize_1.DataTypes.INTEGER,
            primaryKey: true,
            autoIncrement: true
        },
        key: {
            type: sequelize_1.DataTypes.ENUM,
            values: CHALLENGE_KEYS
        },
        name: sequelize_1.DataTypes.STRING,
        category: sequelize_1.DataTypes.STRING,
        tags: sequelize_1.DataTypes.STRING,
        description: sequelize_1.DataTypes.STRING,
        difficulty: sequelize_1.DataTypes.INTEGER,
        hint: sequelize_1.DataTypes.STRING,
        hintUrl: sequelize_1.DataTypes.STRING,
        mitigationUrl: sequelize_1.DataTypes.STRING,
        solved: sequelize_1.DataTypes.BOOLEAN,
        disabledEnv: sequelize_1.DataTypes.STRING,
        tutorialOrder: sequelize_1.DataTypes.NUMBER,
        codingChallengeStatus: sequelize_1.DataTypes.NUMBER
    }, {
        tableName: 'Challenges',
        sequelize
    });
};
exports.ChallengeModelInit = ChallengeModelInit;
//# sourceMappingURL=challenge.js.map